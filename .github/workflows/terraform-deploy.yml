name: Terraform Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: '1.6.0'

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }} - ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config=environments/${{ github.event.inputs.environment }}/backend.hcl

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: |
          terraform plan \
            -var-file=environments/${{ github.event.inputs.environment }}/terraform.tfvars \
            -out=tfplan

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: |
          terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: |
          terraform destroy \
            -var-file=environments/${{ github.event.inputs.environment }}/terraform.tfvars \
            -auto-approve

      - name: Terraform Output
        if: github.event.inputs.action == 'apply'
        run: terraform output

      - name: Deployment summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Terraform ${{ github.event.inputs.action }} for ${{ github.event.inputs.environment }} succeeded!"
          else
            echo "❌ Terraform ${{ github.event.inputs.action }} for ${{ github.event.inputs.environment }} failed!"
          fi
